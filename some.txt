// src/utils/errorHandler.ts
import { Request, Response, NextFunction } from 'express';
import { ZodError } from 'zod';

export class AppError extends Error {
  constructor(
    public statusCode: number,
    public message: string,
    public code?: string,
    public errors?: any[]
  ) {
    super(message);
    this.name = 'AppError';
    Error.captureStackTrace(this, this.constructor);
  }
}

type AsyncRequestHandler = (
  req: Request,
  res: Response,
  next: NextFunction
) => Promise<any>;

export const catchAsync = (fn: AsyncRequestHandler) => {
  return (req: Request, res: Response, next: NextFunction) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
};

// Global error handling middleware
export const errorHandler = (
  err: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  console.error('Error:', err);

  if (err instanceof AppError) {
    return res.status(err.statusCode).json({
      success: false,
      code: err.code || 'ERROR',
      message: err.message,
      errors: err.errors,
    });
  }

  if (err instanceof ZodError) {
    return res.status(400).json({
      success: false,
      code: 'VALIDATION_ERROR',
      message: 'Invalid request data',
      errors: err.errors,
    });
  }

  // Handle mongoose errors
  if (err.name === 'ValidationError') {
    return res.status(400).json({
      success: false,
      code: 'VALIDATION_ERROR',
      message: 'Invalid request data',
      errors: Object.values(err.errors).map((err: any) => ({
        field: err.path,
        message: err.message,
      })),
    });
  }

  if (err.name === 'CastError') {
    return res.status(400).json({
      success: false,
      code: 'INVALID_ID',
      message: 'Invalid ID format',
    });
  }

  // Handle JWT errors
  if (err.name === 'JsonWebTokenError') {
    return res.status(401).json({
      success: false,
      code: 'INVALID_TOKEN',
      message: 'Invalid token',
    });
  }

  if (err.name === 'TokenExpiredError') {
    return res.status(401).json({
      success: false,
      code: 'TOKEN_EXPIRED',
      message: 'Token has expired',
    });
  }

  // Default error
  return res.status(500).json({
    success: false,
    code: 'INTERNAL_SERVER_ERROR',
    message: 'Something went wrong',
  });
};

// Optional: Request validation middleware
import { AnyZodObject } from 'zod';

export const validateRequest = (schema: AnyZodObject) => 
  catchAsync(async (req: Request, res: Response, next: NextFunction) => {
    await schema.parseAsync({
      body: req.body,
      query: req.query,
      params: req.params,
    });
    next();
  });

// Usage example
// src/routes/userRoutes.ts
import express from 'express';
import { z } from 'zod';
import { catchAsync, AppError, validateRequest } from '../utils/errorHandler';

const router = express.Router();

const createUserSchema = z.object({
  body: z.object({
    username: z.string().min(3),
    email: z.string().email(),
    password: z.string().min(6),
  }),
});

router.post(
  '/users',
  validateRequest(createUserSchema),
  catchAsync(async (req, res) => {
    const user = await User.create(req.body);
    
    if (!user) {
      throw new AppError(400, 'Failed to create user');
    }

    res.status(201).json({
      success: true,
      data: user,
    });
  })
);

// Example protected route
router.get(
  '/protected',
  catchAsync(async (req, res) => {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      throw new AppError(404, 'User not found', 'USER_NOT_FOUND');
    }

    res.json({
      success: true,
      data: user,
    });
  })
);

// App setup
// src/app.ts
import express from 'express';
import { errorHandler } from './utils/errorHandler';

const app = express();

app.use(express.json());

// Routes
app.use('/api', router);

// Error handling middleware (should be last)
app.use(errorHandler);

export default app;

// Example service with error handling
// src/services/userService.ts
import { AppError } from '../utils/errorHandler';

export class UserService {
  static async createUser(userData: any) {
    const existingUser = await User.findOne({ email: userData.email });
    
    if (existingUser) {
      throw new AppError(
        409, 
        'User already exists',
        'USER_EXISTS',
        [{ field: 'email', message: 'Email is already registered' }]
      );
    }

    return User.create(userData);
  }

  static async getUser(id: string) {
    const user = await User.findById(id);
    
    if (!user) {
      throw new AppError(404, 'User not found', 'USER_NOT_FOUND');
    }

    return user;
  }
}