// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Proof{
  id          String    @id @default(uuid())
  telegram_id BigInt    @unique
  taskId       String
  userId      String
  amount       Int?
}
model Payer {
  id          String    @id @default(uuid())
  telegram_id BigInt    @unique
  first_name  String?
  Last_name   String?
  address     String?   @unique
  tasks       Task[]
  payouts     Payouts[]
}

model User {
  id            String       @id @default(uuid())
  telegram_id   BigInt       @unique
  first_name    String?
  last_name     String?
  address       String?      @unique
  submissions   Submission[]
  referral_code String?
  ref_claim     Boolean?     @default(false)
  referral_by   String?
  points        Int          @default(0)
  locked_points Int?
  last_checked  DateTime?

  knight_lvl   Int?
  knight_exp  Int?

  mage_lvl  Int?
  mage_exp  Int?

  beast_lvl   Int?
  beast_exp   Int?

  dungeonraid  DungeonRaid[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Dungeon{
    id        String    @id @default(uuid())
    token_ca   String?
    base_amount_usd  Int?

    t1_token_amount BigInt?
    t2_token_amount BigInt?
    t3_token_amount BigInt?

    t1_usd_amount BigInt?
    t2_usd_amount BigInt?
    t3_usd_amount BigInt?

      dungeonraid  DungeonRaid[]
  name             String
  description      String
  entryTokens      Int // Tokens required to enter
  timeToComplete   Int // In seconds
  minimumLevel     Int @default(1)
   isActive         Boolean      @default(true)
}
model DungeonRaid{
   id        String    @id @default(uuid())

  user        User  @relation(fields: [userId], references: [id])
  userId      String
  dungeon     Dungeon   @relation(fields: [dungeonId], references: [id])
  dungeonId   String
  startTime   DateTime  @default(now())
  endTime     DateTime
  completed   Boolean   @default(false)
  claimed     Boolean   @default(false)
  rewardTier  String?   // "base", "silver", or "gold"
  experience  Int?
  tokenAmount Float?
  createdAt   DateTime  @default(now())

  @@index([userId, completed, claimed])
  @@index([endTime])

}

model Task {
  id        String    @id @default(uuid())
  platform  Platforms
  task_name String
  amount    Int
  signature String
  comment   String?
  task_link String
  payer_id  String

  payer       Payer        @relation(fields: [payer_id], references: [id])
  submissions Submission[]

  status    TaskStatus?
  endDate   DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Submission {
  id      String @id @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  task_id String
  task    Task   @relation(fields: [task_id], references: [id])
  amount  Int
  proof   String

  @@unique([user_id, task_id])
}

model Payouts {
  id        String    @id @default(uuid())
  payer_id  String
  payer     Payer     @relation(fields: [payer_id], references: [id])
  amount    Int
  signature String
  status    TxnStatus
}

// model Dungeon{
//  id        String    @id @default(uuid())
//  token_ca  String?

// }
enum TxnStatus {
  Processing
  Success
  Failure
}

enum TaskStatus {
  Active
  Hold
  End
}

enum Platforms {
  twitter
  youtube
  discord
  telegram
}


// model GameUser {
//   id            String        @id @default(uuid())
//   walletAddress String        @unique
//   username      String        @unique
//   level         Int           @default(1)
//   experience    Int           @default(0)
//   energy        Int           @default(100)
//   lastEnergyRefill DateTime   @default(now())
//   tokens        Int           @default(0) // Dungeon entry tokens
//   dungeonRaids  DungeonRaid[]
//   achievements  Achievement[]
//   createdAt     DateTime      @default(now())
//   updatedAt     DateTime      @updatedAt

//   @@index([level])
// }

// model Dungeon {
//   id               String       @id @default(uuid())
//   name             String
//   description      String
//   entryTokens      Int // Tokens required to enter
//   timeToComplete   Int // In seconds
//   minimumLevel     Int @default(1)
//   energyCost       Int
//   baseReward       RewardTier   @relation("BaseReward", fields: [baseRewardId], references: [id])
//   baseRewardId     String
//   silverReward     RewardTier   @relation("SilverReward", fields: [silverRewardId], references: [id])
//   silverRewardId   String
//   goldReward       RewardTier   @relation("GoldReward", fields: [goldRewardId], references: [id])
//   goldRewardId     String
//   baseExperience   Int
//   dungeonRaids     DungeonRaid[]
//   difficultyLevel  Int
//   isActive         Boolean      @default(true)
//   createdAt        DateTime     @default(now())
//   updatedAt        DateTime     @updatedAt

//   @@index([difficultyLevel])
// }

// model RewardTier {
//   id                String     @id @default(uuid())
//   name              String
//   tokenAmount       Float
//   tokenContract     String     // Solana token contract address
//   baseDropRate      Float      // Base probability (0-1)
//   levelScalingFactor Float     // How much level affects drop rate
//   asBaseReward      Dungeon[]  @relation("BaseReward")
//   asSilverReward    Dungeon[]  @relation("SilverReward")
//   asGoldReward      Dungeon[]  @relation("GoldReward")
// }

// model DungeonRaid {
//   id          String    @id @default(uuid())
//   user        GameUser  @relation(fields: [userId], references: [id])
//   userId      String
//   dungeon     Dungeon   @relation(fields: [dungeonId], references: [id])
//   dungeonId   String
//   startTime   DateTime  @default(now())
//   endTime     DateTime
//   completed   Boolean   @default(false)
//   claimed     Boolean   @default(false)
//   rewardTier  String?   // "base", "silver", or "gold"
//   experience  Int?
//   tokenAmount Float?
//   createdAt   DateTime  @default(now())

//   @@index([userId, completed, claimed])
//   @@index([endTime])
// }

// model Achievement {
//   id          String    @id @default(uuid())
//   user        GameUser  @relation(fields: [userId], references: [id])
//   userId      String
//   type        String    // e.g., "dungeon_completions", "level_reached"
//   progress    Int       @default(0)
//   completed   Boolean   @default(false)
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   @@index([userId, type])
// }

// // Enum types
// enum RewardTierType {
//   BASE
//   SILVER
//   GOLD
// }